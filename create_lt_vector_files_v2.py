# -*- coding: utf-8 -*-
"""
Created on 01/21/2020

@author: broberts

Description: 
	Edit shapefiles for creating the GEE image chunk outputs and for running the clip_and_decompose.py script. 
Input requirements: 
	make_fishnet_grid.py 
	make_processing_tiles.py
	shapefile_path - original input shapefile with your ROI (e.g. CONUS, a state, another country)
	simple_shp_path - in the case that your domain has a bunch of islands or small disconnected areas this will make processing easier
	write_to_path - folder where you want your outputs to land
	cell_size - this is the height and width of cells in your vector file for running the clip and decompose step of the STEM framework. Based on CONUS, dividing the width of your domain by ~70 should give you this number
	out_epsg - this is mostly for files that are generated by the make_fishnet_grid.py and may need to be amended but for now give it the final projection you want 
	gee_rows - rows in your GEE vector for generating fitted images
	gee_cols - cols for your GEE vector for generating fitted images

Outputs: 
	'tiles_for_cnd.shp' - vector file for running clip and decompose 
	'ak_gee_tiles_{nrows}_{ncols}_clipped.shp' - vector file for running GEE scripts for generating fitted images
    
"""

import os 
import sys
from osgeo import ogr
import numpy as np 
from subprocess import call
import subprocess
import geopandas as gpd
#from pathlib import Path
import matplotlib.pyplot as mpl

#USER INPUTS
shapefile_path = '/vol/v3/ben_ak/vector_files/alaska_bounds_buffer1000_epsg3338.shp'
simple_shp_path = '/vol/v3/ben_ak/vector_files/ak_simplified_bounds.shp'
write_to_path = '/vol/v3/ben_ak/vector_files/final_vectors/'
cell_size = 50000
out_epsg = 3338
gee_rows = 2
gee_cols = 15

#####################################################################################################
#####################################################################################################
#####################################################################################################

def get_shp_extent(input_shape): 
	"""Get shapefile extent and return a tuple."""
	source = ogr.Open(input_shape, update=True)
	layer = source.GetLayer()
	inLayer = source.GetLayer()
	#create extent tuple 
	extent = inLayer.GetExtent()
	return extent

def reproject(input_shape,epsg): 
	reprojected_filename = input_shape[:-4]+'_reprojected.shp'
	print reprojected_filename
	subprocess.call(['ogr2ogr', '-f','ESRI Shapefile', '-t_srs', 'EPSG:{epsg}'.format(epsg=epsg), '-s_srs', 'EPSG:{epsg}'.format(epsg=epsg), reprojected_filename , input_shape])
	return reprojected_filename


def create_cnd_vectors(shp_path,output_filepath,gridsize): 
	"""Takes a boundary shapefile and creates a fishnet version. Based on make_fishnet_grid.py."""
	grid_extent = get_shp_extent(shp_path)
	#create gee file output name
	output_filename = output_filepath+'cnd_fishnet_{gridsize}_grid.shp'.format(gridsize=int(gridsize))
	#create cnd file output name

	try: 
		if os.path.exists(output_filename):
			print 'cnd file already exists' 
		else:
			print 'making file'
			#call make_fishnet_grid and assign extents from get_shp_extent tuple 
			subprocess.call(['python', 'make_fishnet_grid.py', output_filename, str(grid_extent[0]), str(grid_extent[1]), str(grid_extent[2]), str(grid_extent[3]), str(gridsize), str(gridsize)])
	except RuntimeError:
		print 'That file does not exist' 
		pass
	return output_filename

def intersect_polygons(input_grid,simple_bounds,epsg,output_filepath): 
	"""Create file of cnd vector that lines up with ROI bounds."""
	try: 
		grid = gpd.read_file(input_grid)
		#make sure gpd understands the projection
		grid = grid.to_crs('+init=epsg:{epsg}'.format(epsg=epsg))
		#create a name field 
		grid.loc[:,('name')] = np.arange(len(grid))

	except RuntimeError: 
		print 'could not understand grid projection, reprojecting'
		#remove the variable grid if it is stored
		del grid
		#in the case that it cannot find the projection, reproject it [this is a place where people could run into an error]
		reprojected_grid = reproject(input_grid,epsg)
		grid = gpd.read_file(reprojected_grid)
		grid = grid.to_crs('+init=epsg:{epsg}'.format(epsg=epsg))
		#create a name field 
		grid.loc[:,('name')] = np.arange(len(grid))
		print('reprojected file made')
	try: 
		#read in the simplified bounds 
		bounds = gpd.read_file(simple_bounds)
		bounds = bounds.to_crs('+init=epsg:{epsg}'.format(epsg=epsg))
		print('bounds read in ')

	except RuntimeError: 
		print 'could not understand bounds projection, reprojecting'
		del bounds 
		reprojected_bounds = reproject(simple_bounds,epsg)
		bounds = gpd.read_file(reprojected_bounds)
		bounds = grid.to_crs('+init=epsg:{epsg}'.format(epsg=epsg))

	#join datasets
	spatial_join = gpd.sjoin(grid, bounds, how="inner", op='intersects')
	spatial_join = spatial_join.to_crs('+init=epsg:{epsg}'.format(epsg=epsg))

	#create output name
	sjoin_out_filename = output_filepath+'tiles_for_cnd.shp'

	#write to file
	spatial_join.to_file(sjoin_out_filename)
	return sjoin_out_filename

def create_gee_vectors(input_tiles,output_filepath,nrows,ncols): 
	"""Build and clip to ROI GEE vector for fitted image outputs."""

	#create gee file output name
	output_filename = output_filepath+'gee_tiles_{nrows}_{ncols}.shp'.format(nrows=nrows,ncols=ncols)
	#create clipped gee file output name
	clipped_filename = output_filepath+'gee_tiles_{nrows}_{ncols}_clipped.shp'.format(nrows=nrows,ncols=ncols)

	try: 
		if os.path.exists(output_filename):
			print 'gee file already exists' 
		else:
			print('doing make_processing_tiles script')
			subprocess.call(['python', 'make_processing_tiles.py', '{nrows},{ncols}'.format(nrows=nrows,ncols=ncols), '--tile_path',input_tiles, '--out_path', output_filename])
	except RuntimeError:
		print 'That file does not exist' 
		

	try: 
		if os.path.exists(clipped_filename): 
			print 'clipped gee file already exists'
		else: 
			print('making dissolve file')
			cnd_grid=gpd.read_file(input_tiles)
			dissolve_name = input_tiles[:-4]+'_dissolve.shp'
			cnd_dissolve = cnd_grid.dissolve(by='index_righ')
			cnd_dissolve.to_file(dissolve_name)
			# #create output name
			# #write to file
			subprocess.call(['ogr2ogr', '-clipsrc', dissolve_name, clipped_filename, output_filename])
	except: 
		pass	


def main(): 
	cnd_file = create_cnd_vectors(shapefile_path,write_to_path,float(cell_size))
	cnd_output=intersect_polygons(cnd_file,simple_shp_path,out_epsg,write_to_path)
	gee_file = create_gee_vectors(cnd_output,write_to_path,gee_rows,gee_cols)
	

if __name__ == '__main__':
    main()